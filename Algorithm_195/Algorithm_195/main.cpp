/*
题目描述
牛牛有一个算法交流群，它是这个群的群主，也是这个群实力最强的人。
算法交流群里一共有n个人，每个人都有一个等级a_i​,表示它能解决难度
小于等于a_i的算法问题。除了牛牛以外，群里的每个编号为i的人都在群里
有一个等级比他高的朋友编号为p_i。群友 i 会解决那些他产生和接收的等级小于等于a_i​
的问题，并把解决不了的问题全部交给p_i。保证牛牛的编号为1。保证牛牛的等级全场
唯一且全场最高。如果牛牛解决不了他接收的问题，他将不管这些问题。这天群里的
每个人都产生了一个问题，牛牛知道了每个人产生问题等级k_i​
，他想知道群里的每个人在这天解决了多少问题。

示例1
输入
复制
4,[4,3,2,1],[1,2,3],[1,2,3,4]
输出
复制
[2,2,0,0]
说明
群里一共有4个人
4产生了等级为4的问题，4的能力值为1，无法解决，所以4号把这个问题交给了3号.4号解决问题个数为0
3号产生了等级为3的问题，接受到等级为4的问题。3号本身等级为2，无法解决这两个问题，于是把这两个问题交给了2，自身解决问题个数为0.
2号产生了等级为2的问题，接受到等级为3，4的两个问题。2号等级为3，解决了等级为2，3的问题，把等级为4的问题交给了1.自身解决问题个数为2
1号产生了等级为1的问题，接受到等级为4的问题。1号自身等级为4，解决了这两个问题。自身解决问题个数为2
备注:
0\le k_i,a_i\le 1e6,2\le n\le 1e5 ,1\le p_i\le n0≤k
i
​
,a
i
​
≤1e6,2≤n≤1e5,1≤p
i
​
≤n
输入的第一个参数为整数n，代表群人数
输入第二个参数为vector<int> a，包含n个元素，按顺序代表每个人的等级
输入的第二个参数为vector<int> p，包含n-1个元素，按顺序代表2,3,...n号群友会找谁寻求帮助
输入的第三个参数为vector<int> k，包含n个元素按顺序代表每个人产生的问题等级
*/


#include <vector>
using namespace std;

//普通做法
class Solution {
public:
	/**
	* 算法交流群
	* @param n int整型 群员个数
	* @param a int整型vector 群员的等级
	* @param p int整型vector 群友寻求帮助的人
	* @param k int整型vector 群友产生的问题等级
	* @return int整型vector
	*/


	vector<int> solve(int n, vector<int> a, vector<int> p, vector<int> k){
		vector<int> ans(n, 0);
		if (k[0] <= a[0]) ans[0]++;
		for (int i = 1; i < n; ++i) {
			int t = i;
			int val = k[i];
			while (t != 0 && val > a[t]) {
				t = p[t - 1] - 1;
			}
			if (val <= a[t]) ans[t]++;

		}
		return ans;
	}
};





int main()
{
	return 0;
}