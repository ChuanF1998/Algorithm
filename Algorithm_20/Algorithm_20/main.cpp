/*
题目描述
扑克牌游戏大家应该都比较熟悉了，一副牌由54张组成，含3~A，2各4张，小王1张，大王1张。牌面从小到大用如下字符和字符串表示（其中，小写joker表示小王，大写JOKER表示大王）:)
3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如：4 4 4 4-joker JOKER
请比较两手牌大小，输出较大的牌，如果不存在比较关系则输出ERROR

基本规则：
（1）输入每手牌可能是个子，对子，顺子（连续5张），三个，炸弹（四个）和对王中的一种，不存在其他情况，由输入保证两手牌都是合法的，顺子已经从小到大排列；
（2）除了炸弹和对王可以和所有牌比较之外，其他类型的牌只能跟相同类型的存在比较关系（如，对子跟对子比较，三个跟三个比较），不考虑拆牌情况（如：将对子拆分成个子）
（3）大小规则跟大家平时了解的常见规则相同，个子，对子，三个比较牌面大小；顺子比较最小牌大小；炸弹大于前面所有的牌，炸弹之间比较牌面大小；对王是最大的牌；
（4）输入的两手牌不会出现相等的情况。

答案提示：
（1）除了炸弹和对王之外，其他必须同类型比较。
（2）输入已经保证合法性，不用检查输入是否是合法的牌。
（3）输入的顺子已经经过从小到大排序，因此不用再排序了.
输入描述:
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如4 4 4 4-joker JOKER。
输出描述:
输出两手牌中较大的那手，不含连接符，扑克牌顺序不变，仍以空格隔开；如果不存在比较关系则输出ERROR。

示例1
输入
4 4 4 4-joker JOKER

输出
joker JOKER
*/



#include <iostream>
#include <string>
#include <vector>
using namespace std;

class large_poker
{
public:
	string get_largr_poker(string& str)
	{
		string str_cmp = str;  //先拷贝一份副本，一会输出副本
		auto cmp_first = str_cmp.begin();
		auto cmp_last = str_cmp.end();
		while (cmp_first != cmp_last) { //按照‘-’分开
			if (*cmp_first == '-') {
				break;
			}
			++cmp_first;
		}
		string str1_cmp(str_cmp.begin(), cmp_first);
		string str2_cmp(cmp_first + 1, str_cmp.end());

		auto first = str.begin();
		auto last = str.end();
		auto it = str.begin();
		while (it != last){
			if (*it == '0') {   //为了判断方便，将10这张扑克变成1
				it = str.erase(it);
			}
			else {
				it++;
			}
		}

		while (first != last) {
			if (*first == '-') {
				break;
			}
			++first;
		}
		string str1(str.begin(), first);
		string str2(first + 1, str.end());
		//保存一副除大小王的牌，10保存为1
		vector<char> poker{ '3', '4', '5', '6', '7', '8', '9', '1', 'J', 'Q', 'K', 'A', '2' };
		string s1 = poker_species(str1);
		string s2 = poker_species(str2);
		//有炸弹单独考虑，炸弹也要考虑王炸还是一般炸弹
		if (s1 == "big_bomb") {
			return str1_cmp;
		}
		else if (s1 == "s_single") {
			if (s2 == "b_single"){
				return str2_cmp;
			}
			else {
				return str1_cmp;
			}
		}
		else if (s1 == "b_single") {
			return str1_cmp;
		}
		else if (s1 == "ordinary_bomb") {
			if (s2 == "no"){
				return str1_cmp;
			}
			else if (s2 == "big_bomb"){
				return str2_cmp;
			}
			else{
				int m = 0;
				int n = 0;
				for (int i = 0; i<13; ++i){
					if (str1[0] == poker[i]){
						m = i;
					}
					if (str2[0] == poker[i]){
						n = i;
					}
				}
				if (m>n){
					return str1_cmp;
				}
				else {
					return str2_cmp;
				}
			}
		}

		if (s2 == "big_bomb") {
			return str2_cmp;
		}
		else if (s2 == "s_single") {
			if (s1 == "b_single"){
				return str1_cmp;
			}
			else {
				return str2_cmp;
			}
		}
		else if (s2 == "b_single") {
			return str2_cmp;
		}
		else if (s2 == "ordinary_bomb") {
			if (s1 == "no"){
				return str2_cmp;
			}
			else if (s2 == "big_bomb"){
				return str2_cmp;
			}
			else{
				int m = 0;
				int n = 0;
				for (int i = 0; i<13; ++i){
					if (str1[0] == poker[i]){
						m = i;
					}
					if (str2[0] == poker[i]){
						n = i;
					}
				}
				if (m>n){
					return str1_cmp;
				}
				else {
					return str2_cmp;
				}
			}
		}

		if (str1.size() != str2.size()) {
			return "ERROR";
		}

		int m = 0;
		int n = 0;
		for (int i = 0; i<13; ++i){
			if (str1[0] == poker[i]){
				m = i;
			}
			if (str2[0] == poker[i]){
				n = i;
			}
		}
		if (m>n) {
			return str1_cmp;
		}
		else {
			return str2_cmp;
		}
	}
	string poker_species(string& str) {
		if (str == "joker JOKER"){
			return "big_bomb";
		}
		if (str == "joker"){
			return "s_single";
		}
		if (str == "JOKER"){
			return "b_single";
		}
		if (str.size() == 7) {
			return "ordinary_bomb";
		}
		return "no";
	}
};

int main()
{
	large_poker l;
	string str;
	while (getline(cin, str)){
		cout << l.get_largr_poker(str);
	}
	return 0;
}